{
  "{\"assumptions\":{},\"sourceRoot\":\"C:\\\\Users\\\\SaiMadhu's PC\\\\Nodeprojects\\\\NodeAssignments\\\\Module6\\\\\",\"caller\":{\"name\":\"@babel/register\"},\"cwd\":\"C:\\\\Users\\\\SaiMadhu's PC\\\\Nodeprojects\\\\NodeAssignments\\\\Module6\",\"filename\":\"C:\\\\Users\\\\SaiMadhu's PC\\\\Nodeprojects\\\\NodeAssignments\\\\Module6\\\\app.js\",\"targets\":{},\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"browserslistConfigFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"C:\\\\Users\\\\SaiMadhu's PC\\\\Nodeprojects\\\\NodeAssignments\\\\Module6\",\"rootMode\":\"root\",\"plugins\":[],\"presets\":[]}:7.14.3": {
    "metadata": {},
    "options": {
      "assumptions": {},
      "sourceRoot": "C:\\Users\\SaiMadhu's PC\\Nodeprojects\\NodeAssignments\\Module6\\",
      "caller": {
        "name": "@babel/register"
      },
      "cwd": "C:\\Users\\SaiMadhu's PC\\Nodeprojects\\NodeAssignments\\Module6",
      "filename": "C:\\Users\\SaiMadhu's PC\\Nodeprojects\\NodeAssignments\\Module6\\app.js",
      "targets": {},
      "cloneInputAst": true,
      "babelrc": false,
      "configFile": false,
      "browserslistConfigFile": false,
      "envName": "development",
      "root": "C:\\Users\\SaiMadhu's PC\\Nodeprojects\\NodeAssignments\\Module6",
      "rootMode": "root",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "C:\\Users\\SaiMadhu's PC\\Nodeprojects\\NodeAssignments\\Module6\\app.js",
        "plugins": []
      },
      "generatorOpts": {
        "filename": "C:\\Users\\SaiMadhu's PC\\Nodeprojects\\NodeAssignments\\Module6\\app.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "C:\\Users\\SaiMadhu's PC\\Nodeprojects\\NodeAssignments\\Module6\\",
        "sourceFileName": "app.js"
      }
    },
    "ast": null,
    "code": "const express = require('express');\n\nconst bodyParser = require('body-parser');\n\nconst app = express();\nconst port = process.env.port || 3000;\napp.use(express.static(__dirname + '/public'));\napp.use(bodyParser.urlencoded({\n  extended: true\n}));\napp.use(bodyParser.json());\napp.set('view engine', 'ejs');\napp.set('views', './views');\n\nconst MongoClient = require('mongodb').MongoClient;\n\nconst mongoUrl = 'mongodb://127.0.0.1:27017';\nconst dbName = 'dbmodule6';\nconst collectionName = 'buglist';\nlet db;\n\nconst ObjectId = require('mongodb').ObjectID;\n\napp.post('/addBug', (req, res) => {\n  const rec = req.body;\n  rec[\"createTime\"] = Date.now();\n  rec[\"closeTime\"] = ''; //console.log(\"bug ==> \", rec)\n\n  db.collection(collectionName).insertOne(rec).then(result => {\n    //res.status(200).send(\"New order inserted ... check /orderDashboard \")\n    //console.log(\"result : \", result.ops)\n    res.redirect(\"/\");\n  }).catch(err => {\n    console.error(`Error Message : ${err}`);\n    res.status(500).send(`Error Message : ${err}`);\n  });\n}); //Get data from db and display on index.ejs\n\napp.get('/', (req, res) => {\n  db.collection(collectionName).find().toArray((err, result) => {\n    if (err) throw err; //console.log(\"result ==> \", result)\n\n    let status;\n    const bugs = result.map(bug => {\n      console.log(\"bug ==> \", bug);\n      const slaTime = bug.createTime + 259200000;\n\n      if (bug.closeTime.length == '') {\n        status = \"OPEN\";\n      } else {\n        status = \"CLOSE\";\n        bug[\"closeTimeStr\"] = new Date(bug.closeTime).toLocaleString();\n      }\n\n      bug[\"createTimeStr\"] = new Date(bug.createTime).toLocaleString();\n      bug[\"slaTimeStr\"] = new Date(slaTime).toLocaleString();\n      bug[\"status\"] = status;\n      return bug;\n    }); //console.log(\"bugs ==> \", bugs)\n\n    res.render('index.ejs', {\n      data: bugs\n    });\n  });\n});\napp.get('/deleteBug/:id', (req, res) => {\n  const id = req.params.id;\n  console.log(\"delete id ==> \", id);\n  db.collection(collectionName).findOneAndDelete({\n    _id: ObjectId(id)\n  }, (err, result) => {\n    if (err) return res.send(500, err);\n    res.redirect('/');\n    console.log(\"deleteBug result ==> \", result);\n  });\n});\napp.get('/closeBug/:id', (req, res) => {\n  const id = req.params.id;\n  console.log(\"id ==> \", id);\n  db.collection(collectionName).findOne({\n    _id: ObjectId(id)\n  }).then(result => {\n    //console.log(\"result ==> \", result)\n    db.collection(collectionName).findOneAndUpdate({\n      _id: ObjectId(result._id)\n    }, {\n      $set: {\n        title: result.title,\n        assignee: result.assignee,\n        description: result.description,\n        createTime: result.createTime,\n        closeTime: Date.now()\n      }\n    }, {\n      upsert: true\n    }, (err, result) => {\n      if (err) return res.send(err);\n      res.redirect('/');\n    });\n  }).catch(err => console.error(`Error : ${err}`));\n});\nMongoClient.connect(mongoUrl, {\n  useNewUrlParser: true\n}, (err, client) => {\n  if (err) throw err;\n  db = client.db(dbName);\n  app.listen(port, () => {\n    console.log(`Express Server running on port ${port}`);\n  });\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,",
    "map": {
      "version": 3,
      "sources": [
        "app.js"
      ],
      "names": [
        "express",
        "require",
        "bodyParser",
        "app",
        "port",
        "process",
        "env",
        "use",
        "static",
        "__dirname",
        "urlencoded",
        "extended",
        "json",
        "set",
        "MongoClient",
        "mongoUrl",
        "dbName",
        "collectionName",
        "db",
        "ObjectId",
        "ObjectID",
        "post",
        "req",
        "res",
        "rec",
        "body",
        "Date",
        "now",
        "collection",
        "insertOne",
        "then",
        "result",
        "redirect",
        "catch",
        "err",
        "console",
        "error",
        "status",
        "send",
        "get",
        "find",
        "toArray",
        "bugs",
        "map",
        "bug",
        "log",
        "slaTime",
        "createTime",
        "closeTime",
        "length",
        "toLocaleString",
        "render",
        "data",
        "id",
        "params",
        "findOneAndDelete",
        "_id",
        "findOne",
        "findOneAndUpdate",
        "$set",
        "title",
        "assignee",
        "description",
        "upsert",
        "connect",
        "useNewUrlParser",
        "client",
        "listen"
      ],
      "mappings": "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",
      "sourceRoot": "C:\\Users\\SaiMadhu's PC\\Nodeprojects\\NodeAssignments\\Module6\\",
      "sourcesContent": [
        "const express = require ('express');\r\nconst bodyParser = require('body-parser');\r\n\r\nconst app = express();\r\nconst port = process.env.port || 3000;\r\n\r\napp.use(express.static(__dirname+'/public'))\r\n\r\napp.use(bodyParser.urlencoded({extended:true}))\r\napp.use(bodyParser.json())\r\n\r\napp.set('view engine', 'ejs')\r\napp.set('views', './views')\r\n\r\nconst MongoClient = require('mongodb').MongoClient\r\nconst mongoUrl = 'mongodb://127.0.0.1:27017'\r\nconst dbName = 'dbmodule6'\r\nconst collectionName = 'buglist'\r\nlet db\r\n\r\nconst ObjectId = require('mongodb').ObjectID\r\n\r\napp.post('/addBug', (req,res)=>{\r\n    const rec = req.body\r\n    rec[\"createTime\"] = Date.now()\r\n    rec[\"closeTime\"] = ''\r\n    //console.log(\"bug ==> \", rec)\r\n\r\n    db.collection(collectionName).insertOne(rec)\r\n        .then( result => {\r\n            //res.status(200).send(\"New order inserted ... check /orderDashboard \")\r\n            //console.log(\"result : \", result.ops)\r\n            res.redirect(\"/\")\r\n        })\r\n        .catch(err => {\r\n            console.error(`Error Message : ${err}`)\r\n            res.status(500).send(`Error Message : ${err}`)\r\n        })\r\n    \r\n})\r\n\r\n//Get data from db and display on index.ejs\r\napp.get('/', (req,res)=>{\r\n    db.collection(collectionName).find().toArray((err, result)=>{\r\n        if(err) throw err\r\n        //console.log(\"result ==> \", result)\r\n        let status\r\n        const bugs = result.map( bug =>{\r\n            console.log(\"bug ==> \", bug)\r\n            const slaTime = bug.createTime + 259200000\r\n\r\n            if( bug.closeTime.length == '' ) {\r\n                status = \"OPEN\"\r\n            } else {\r\n                status = \"CLOSE\"\r\n                bug[\"closeTimeStr\"] = new Date(bug.closeTime).toLocaleString()\r\n            }\r\n            bug[\"createTimeStr\"] = new Date(bug.createTime).toLocaleString()\r\n            bug[\"slaTimeStr\"] = new Date(slaTime).toLocaleString()\r\n            bug[\"status\"] = status\r\n            return bug\r\n        })\r\n        //console.log(\"bugs ==> \", bugs)\r\n        res.render('index.ejs', {data:bugs})\r\n    })\r\n})\r\n\r\napp.get('/deleteBug/:id', (req,res)=>{\r\n    const id = req.params.id\r\n    console.log(\"delete id ==> \", id)\r\n\r\n    db.collection(collectionName).findOneAndDelete({\r\n        _id: ObjectId(id)\r\n    }, (err,result)=>{\r\n        if(err) return res.send(500,err)\r\n        res.redirect('/')\r\n        console.log(\"deleteBug result ==> \", result)\r\n    })\r\n\r\n})\r\n\r\napp.get('/closeBug/:id', (req,res)=>{\r\n    const id = req.params.id\r\n    console.log(\"id ==> \", id)\r\n    \r\n    db.collection(collectionName).findOne( {_id: ObjectId(id)} )\r\n        .then(result =>{\r\n            //console.log(\"result ==> \", result)\r\n            db.collection(collectionName)\r\n                .findOneAndUpdate({_id: ObjectId(result._id)},{\r\n                    $set:{\r\n                        title : result.title,\r\n                        assignee : result.assignee,\r\n                        description : result.description,\r\n                        createTime : result.createTime,\r\n                        closeTime: Date.now(),\r\n                    }\r\n                },{\r\n                    upsert: true\r\n                }, (err,result)=>{\r\n                    if(err) return res.send(err)\r\n                    res.redirect('/')\r\n                })\r\n        })\r\n        .catch( err => console.error(`Error : ${err}`))\r\n\r\n})\r\n\r\nMongoClient.connect(mongoUrl, { useNewUrlParser: true }, (err,client)=>{\r\n    if(err) throw err\r\n    db = client.db(dbName)\r\n    app.listen(port, ()=>{\r\n        console.log(`Express Server running on port ${port}`)\r\n    })\r\n})"
      ]
    },
    "sourceType": "module",
    "mtime": 1621550855465
  }
}